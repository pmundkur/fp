%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Copyright 2009-2013       Prashanth Mundkur.                          %
%  Author  Prashanth Mundkur <prashanth.mundkur _at_ gmail.com>          %
%                                                                        %
%  This file is part of FormatCompiler.                                  %
%                                                                        %
%  FormatCompiler is free software: you can redistribute it and/or       %
%  modify it under the terms of the GNU Lesser General Public            %
%  License as published by the Free Software Foundation, either          %
%  version 3 of the License, or (at your option) any later version.      %
%                                                                        %
%  Alternatively, this software may be distributed, used, and modified   %
%  under the terms of the BSD license.                                   %
%                                                                        %
%  FormatCompiler is distributed in the hope that it will be useful,     %
%  but WITHOUT ANY WARRANTY; without even the implied warranty of        %
%  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                  %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

metavar form_defn, f                    ::= {{ lex alphanum }} {{ com Struct name }}

metavar field, x, y, name, n            ::= {{ lex alphanum }} {{ com Field }}

metavar integer_literal, i              ::= {{ lex numeral }}  {{ com Literal integers }}

metavar alignment, current_alignment    ::= {{ lex alphanum }} {{ com Alignment expression }}

metavar value, v                        ::= {{ lex numeral }}  {{ com Constant values }}

metavar target_variable, tv             ::= {{ lex alphanum }} {{ com Target variable }}

indexvar index, j, k                    ::= {{ lex numeral }}  {{ com Indices }}

grammar

% Kinds of types.
kind, K :: 'k_' ::=                             {{ com Kinds }}
 | T                        ::  :: base         {{ com Base types }}
 | Struct                   ::  :: struct       {{ com Struct types }}

 % Sigma below refers to expression values, so that vectors and arrays
 % are dependent types.
 | Sigma -> T               ::  :: vector       {{ com Vector types }}  {{ tex \sigma\rightarrow [[T]] }}
 | Sigma -> Struct          ::  :: array        {{ com Array types }}   {{ tex \sigma\rightarrow [[Struct]] }}

 % A map arises from the classify construct, and actually should be
 % dependently-typed like vectors and arrays, but we simplify by
 % making it a map from names (i.e. branch labels) to structs.
 | Map                      ::  :: map          {{ com Cases types }}

% Primitive types.
base, b :: '' ::=                               {{ com Base types }}
 | bit                      ::  :: bit
 | byte                     ::  :: byte
 | int16                    ::  :: int16
 | int32                    ::  :: int32
 | int64                    ::  :: int64

 % int is only here as an interface to the int type of the
 % implementation language used by the generated code (e.g. Ocaml);
 % it's only used in the value expression typing rules.
 | int                      ::  :: int

% Expressions.
%
% These are expressions that are used to specify vector-lengths, and a
% slight extension of these expressions will be used to specify value
% specifications.
exp, e :: '' ::=                                {{ com Expressions }}
 | integer_literal          ::   :: integer
 | x                        ::   :: field_ref
 | e1 + e2                  ::   :: addition
 | e1 - e2                  ::   :: subtraction
 | e1 * e2                  ::   :: multiplication
 | e1 / e2                  ::   :: division
 | ( e )                    :: S :: grouping
 | sizeof x                 ::   :: sizeof
 | length x                 ::   :: length
 | offset x                 ::   :: offset
 | round e i                ::   :: round
 | num_set_bits x           ::   :: num_set_bits
 | remaining ()             ::   :: remaining

% Path expressions.
%
% The path expressions are used in branch case guards and value
% expressions.  Paths are used to refer to fields inside structs that
% are nested inside maps.  Although they could be used to refer to
% structs inside arrays, that is not done here.  Note that paths
% depend on the environment set up by the branch cases; see the
% value_exp_typing rule.
path, p :: '' ::=                               {{ com Path expressions }}
 | x                        ::  :: path_leaf
 | path . x                 ::  :: dot_path

% Field types.
%
% We first specify struct types separately.

struct, s :: 's_' ::=                           {{ com Struct types }}
 % The value expressions for fields (VD) are separated out into a
 % separate syntactic rule, and appear after field declarations.  This
 % has been done to ease the typing specification, since the
 % environment for the value expressions includes _all_ then fields in
 % the enclosing struct, including fields that lexically come later in
 % the concrete syntax.
 | format { D ;; VD }           ::  :: struct

 % Modular definitions are supported by re-using struct definitions by
 % name.
 | format f                     ::  :: refer

 % The array type notation differs from that of vectors since the tau
 % will actually be a struct, and not a base type.  There are two
 % types of arrays: arrays with a specified length or number of
 % elements (elem_arr) and arrays with a specified size in bytes
 % (size_arr).  The size_arr type is only used at parse time; at
 % generation time, each array is specified as an elem_arr.
 | elem_arr ( e , struct )      ::  :: elem_array
 | size_arr ( e , struct )      ::  :: size_array

map :: '' ::=
% A classify field is typed as a list of case tuples.  Each case is
% represented as a tuple of the branching value, the branch name, and
% the nested type.  The branch name will be used in the branch guard
% components of the cases of a field value.

 | </ vj , nj , sj // j />      ::  :: cases

% The type of a field is either a base type or a constructed type,
% which includes vectors, structs and maps.  This allows fields inside
% structs to have struct types, i.e. structs can nest inside structs.

tau {{ tex \tau }} :: 't_' ::=                  {{ com Type expressions }}
 | b                            ::  :: base
 | b [ e ]                      ::  :: vector
 | struct                       ::  :: struct
 | map                          ::  :: map

% Syntactic type expressions differ only in the specification for the
% classify construct.

ty :: 'ty_' ::=
 | b                            ::  :: base
 | b [ e ]                      ::  :: vector
 | struct                       ::  :: struct
 | struct within e              ::  :: sized_struct
 | classify ( y ) map           ::  :: cases
 | classify ( y ) map within e  ::  :: sized_cases

% A sequence of field and alignment declarations.
D :: 'decl_' ::=                                {{ com Declarations }}
 |                              ::  :: nil
 | F ; D                        ::  :: cons

% A field or alignment declaration.
F :: '' ::=                                     {{ com Aligns and Fields }}
 | align e                      ::  :: alignment
 | x : ty                       ::  :: field

% Value declarations.
%
% The value declarations are unordered, so we use a list form.  This
% ensures that we use the same environment for each decl.
VD :: '' ::=                                    {{ com Value declarations }}
 | V1 .. Vj                 ::  :: value_decls

% A field value declaration.
V :: '' ::=                                     {{ com Field value specification }}
 | x : value_cases          ::  :: value_case_decls

% Field value cases.
%
% A value can be specified for each branch of a classification tree,
% using a case per branch.
value_cases, vcs :: '' ::=                      {{ com Value cases }}
 | vc1 .. vcj               ::  :: value_cases

% A field value case.
%
% The value is guarded by the branch specifier.  In the implementation
% we also support the "default" branch (i.e. "_"), but we don't
% specify it here for simplicity.
value_case, vc :: '' ::=                        {{ com Value case }}
 | bcases -> value_exp      ::  :: value_case

% Branch cases.
%
% A branch is specified using an ordered list of branch cases.
bcases, cs :: 'bc_' ::=                         {{ com Branch case }}
 |                          ::  :: nil
 | bcases ; branch_case     ::  :: cons

% A branch case.
%
% Each branch case names a particular branch of the classification
% tree emanating from the field specified by path.
branch_case, bc :: '' ::=                       {{ com Branch guard }}
 | path = n                 ::  :: branch_guard

% Value expressions.
%
% This extends the expression syntax.  The path syntax allows value
% expressions to refer to fields within classification trees.
value_exp, ve :: '' ::=                         {{ com Value expressions }}
 | e                        ::  :: expr
 | path                     ::  :: qualified_field
 | sizeof path              ::  :: path_sizeof
 | length path              ::  :: path_length
 | offset path              ::  :: path_offset
 | round path i             ::  :: path_round
 | num_set_bits path        ::  :: path_num_set_bits

% The library environment.
%
% This contains the set of known formats.
Prelude, P :: 'lib_' ::=
 |                          ::  :: nil
 | f ; P                    ::  :: cons

% The typing environment.
%
% As usual, this maps a field name to its field type.
E :: 'env_' ::=                                 {{ com Typing environments }}
 |                          ::  :: nil
 | x : tau                  ::  :: cons
 | E1 ; E2                  ::  :: append
 | E1 \ E2                  ::  :: minus

% The branching environment.
%
% This environment stores the current set of paths in the
% classification tree.  The paths point to the selected Struct within
% a Map.
C :: 'class_env_' ::=
 |                          ::  :: nil
 | C ; path : tau           ::  :: cons

% Sets containing field names.
%
% These sets are usually used to ensure uniqueness of names, or to
% ensure the use of known names.
S, L :: 'set_' ::=                                 {{ com Name sets }}
 | Empty                    ::  :: nil          {{ com Empty set }} {{ tex \empty }}
 | S + x                    ::  :: union        {{ com Set union }} {{ tex [[S]] \cup {[[x]]} }}

% Alignment expressions.
align_expr, a :: 'align_' ::=                   {{ com Alignment expressions }}
 | current_alignment        ::  :: var
 | integer_literal          ::  :: const
 | a1 + a2                  ::  :: plus
 | a1 * a2                  ::  :: mult
 | sizeof ( tau )           ::  :: sizeof

 % The ( exp ) production is purely a mechanism for the benefit of
 % Ott, to inject expressions as alignments without causing Ott any
 % heartburn.
 | ( exp )                  :: S :: exp

 % const_fold is a function that is defined when exp can be
 % constant-folded into a constant, and is not defined otherwise.
 | const_fold ( exp )       ::   :: const_fold


% Additional syntax for premises in inference rules.  See the Ott
% manual.
formula :: formula_ ::=
 | judgement                    ::  :: judgement    % include the judgement forms
 | </ formulaj // j />          ::  :: formula_list
 | E ; x : tau ; E'             ::  :: env
 | TE ; tv : tt ; TE'           ::  :: target_env
 | FM ; x : tv ; FM'            ::  :: field_env
 | x in S                       ::  :: in_S             {{ tex [[x]]\not\in [[S]] }}
 | x not in S                   ::  :: not_in_S         {{ tex [[x]]\not\in [[S]] }}
 | f in P                       ::  :: f_in_P           {{ tex [[f]]    \in [[P]] }}
 | a                            ::  :: current_alignment
 | a '%' i1 = i2                ::  :: alignment_boundary
 | a < a'                       ::  :: alignment_compare
 | v = a                        ::  :: alignment_equal

 % This is a predicate that ensures a field type is compatible to an
 % int.
 | T_to_int ( tau )             ::  :: type_cast_to_int

 | distinct ( </ nj // j /> )   ::  :: distinct_names
 | n in branches ( tau )        ::  :: names_in_map

 % This is used to extract the field type of a field from a struct.
 | tau . x  = tau'              ::  :: field_selection

 % Formulae specifically for rules related to classification and
 % branching.
 | C1 ; path : tau ; C2         ::  :: class_env
 | path  in dom ( C )           ::  :: path_in_class_env
 | path not in dom ( C )        ::  :: path_not_in_class_env
 | tau [ n ] = tau'             ::  :: branch_selection
 | x in dom ( Struct )          ::  :: field_in_struct

terminals :: '' ::=                             {{ com Syntax terminals }}
 | ->                           ::  :: rarrow   {{ tex \rightarrow }}
 | |-                           ::  :: vdash    {{ tex \vdash }}


% The type checking rules follow.


defns
typing :: '' ::=

% Type environment lookup for variables.
defn
E ( x ) = tau       ::  :: typing_ctxt :: 'typing_ctxt_' by

E1 ; x : tau ; E2
--------------------------  :: var
E ( x ) = tau


% Classification environment lookup for paths.
defn
C |- path : tau     ::  :: class_env_ctxt :: 'class_env_ctxt_' by

C1 ; path : tau ; C2
--------------------------  :: path
C |- path : tau


% Rules to type length expressions.
%
% Expression typing is used for vector and array length expressions,
% and value specifiers.  In the former case, we are interested if the
% expression can be typed as an integer.  In the latter case, we are
% interested if the value expression can be typed with the type
% carried by the field.
%
% Although array expressions and value expressions have been
% differentiated syntactically above (to handle paths in value
% expressions), they will be typed using the same typing relation, and
% the difference between the two is implemented in the typing relation
% for V (value_case_decl_typing).
defn
E |- exp : int      ::  :: array_size_typing :: 'array_size_typing_' by

--------------------------  :: int
E |- integer_literal : int

% We handle bit-vectors specially, and the generic case below: they
% can be converted into integers if their length is a constant and
% less then a limit.  We don't support 64-bit conversion for now,
% since a work-around using two 32-bit vectors exists.
E ( x ) = bit [ e ]
const_fold ( e ) < 32
--------------------------  :: var_bit_vector
E |- x : int

% This is the generic case.
E ( x ) = tau
T_to_int ( tau )
--------------------------  :: var
E |- x : int

E |- e1 : int
E |- e2 : int
--------------------------  :: addition
E |- e1 + e2 : int

E |- e1 : int
E |- e2 : int
--------------------------  :: subtraction
E |- e1 - e2 : int

E |- e1 : int
E |- e2 : int
--------------------------  :: multiplication
E |- e1 * e2 : int

E |- e1 : int
E |- e2 : int
--------------------------  :: division
E |- e1 / e2 : int

E |- e : int
--------------------------  :: grouping
E |- (e) : int

E ( x ) = base
--------------------------  :: sizeof
E |- sizeof x  : int

E ( x ) = base [ e ]
--------------------------  :: length
E |- length x  : int

E ( x ) = tau
--------------------------  :: offset
E |- offset x  : int

E |- e : int
--------------------------  :: round
E |- round e integer_literal : int

E ( x ) = bit [ e ]
--------------------------  :: num_set_bits
E |- num_set_bits x  : int

% There might be some context restrictions on this later (since the
% value of remaining() depends on the current runtime parsing
% context), but for typing, we don't need them.
--------------------------  :: remaining
E |- remaining ()  : int


% Rules to ensure that type expressions are well-kinded.  We also
% thread an alignment offset 'a' through the rules, since type
% expressions are only well-kinded only at certain alignments.
% Specifically, non-bit-oriented types are only well-kinded at byte
% offsets.  Hence, all byte-aligned offsets are equivalent to offset
% 0.
defn
E , a |- tau : K , a'       ::  :: kind_tau :: 'kind_tau_' by

--------------------------  :: bit
E , a |- bit : T , a + 1

E |- e : int
--------------------------  :: bit_vector
E, a |- bit[e] : Sigma -> T , a + (e)

% All non-bit types are required to be byte-aligned.

a % 8 = 0
--------------------------  :: byte
E , a |- byte : T , 0

a % 8 = 0
--------------------------  :: int16
E , a |- int16 : T , 0

a % 8 = 0
--------------------------  :: int32
E , a |- int32 : T , 0

a % 8 = 0
--------------------------  :: int64
E , a |- int64 : T , 0

a % 8 = 0
E |- e : int
--------------------------  :: byte_vector
E, a |- byte[e] : Sigma -> T , 0

a % 8 = 0
E |- e : int
--------------------------  :: int16_vector
E, a |- int16[e] : Sigma -> T , 0

a % 8 = 0
E |- e : int
--------------------------  :: int32_vector
E, a |- int32[e] : Sigma -> T , 0

a % 8 = 0
E |- e : int
--------------------------  :: int64_vector
E, a |- int64[e] : Sigma -> T , 0

a % 8 = 0
E, a |- struct : K , 0
--------------------------  :: struct
E, a |- struct : K , 0

a % 8 = 0
E, a |- map : Map , 0
--------------------------  :: map
E, a |- map : K , 0

% The kinding judgement, continued: for structs.
defn
P , E , a |- struct : K , a'       ::  :: kind_struct :: 'kind_struct_' by

% We allow nested structs only on byte-boundaries; i.e. they need to
% start and end on byte-boundaries.
a % 8 = 0
P , E , 0 , Empty , Empty |- D , E' , a' , S , L
a' % 8 = 0
E' \ E |- VD
--------------------------  :: struct
P, E, a |- format { D ;; VD } : Struct, 0

a % 8 = 0
f in P
--------------------------  :: refer
P, E, a |- format f : Struct, 0

% We allow arrays only on byte-boundaries with byte-aligned elements;
% i.e. each array element needs to start and end on byte boundaries.

a % 8 = 0
E |- e : int
P, E , 0 |- s : Struct , a'
a' % 8 = 0
--------------------------  :: elem_array
P, E, a |- elem_arr ( e, s ) : Sigma -> Struct, 0

a % 8 = 0
E |- e : int
P, E , 0 |- s : Struct , a'
a' % 8 = 0
--------------------------  :: elem_array
P, E, a |- size_arr ( e, s ) : Sigma -> Struct, 0

% The kinding judgement, continued: for maps.
defn
P , E , a |- map : K , a'       ::  :: kind_map :: 'kind_map_' by

% For cases, we need to check that, starting from the same alignment,
% each case branch will leave the subsequent fields suitably aligned.
a % 8 = 0
</ E, a |- sj : Kj , aj // j />
</ aj % 8 = 0 // j />
--------------------------  :: cases
P, E, a |- </ vj , nj , sj // j /> : Map, 0


% Rules to process a sequence of field and alignment declarations.
% Since field names cannot conflict, i.e. there cannot be duplicate
% field names, we thread a set S of current names through the rules.
% To ensure linearity of classification use, we also thread a set L of
% fields used for classification.  See the field_typing rule below for
% more explanation.
defn
P , E , a , S , L |- D , E' , a' , S' , L' ::  :: decls_typing :: 'decls_typing_' by

% That's not a typo below: it's the null decl!
--------------------------  :: nil
P , E , a , S , L |- , E , a , S , L

P , E  , a  , S  , L  |- F , E'  , a'  , S' , L'
P , E' , a' , S' , L' |- D , E'' , a'' , S'' , L''
--------------------------  :: decl_cons
P , E  , a  , S  , L  |- F ; D , E'' , a'' , S'' , L''


% Rules to process a single field or alignment declaration.
%
% Alignment declarations update the bit alignment, and field
% declarations add to the environment as well as update the bit
% alignment, and so each rule will output a possibly modified
% environment and an updated bit alignment.
%
%
% We thread a set S of field names to check for uniqueness.  This set
% is checked and updated by each non-alignment field.
%
% We also thread a set L of fields used for classification, to ensure
% that fields are not used for branching multiple times.  This is
% actually a generation-facet check, not a parsing-facet check, but
% it's easier to do at type checking time.  The set L is only checked
% and updated at classify fields.
defn
P , E , a , S , L |- F , E' , a' , S' , L'  ::  :: field_typing :: 'field_typing_' by

% We only support constant expressions for alignment values, and only
% support alignment at byte boundaries.
const_fold ( e ) % 8 = 0
--------------------------  :: alignment
P , E , a , S , L |- align e , E , 0 , S , L

% We don't have a single rule for x : tau, but instead separate out
% the rules for the top level cases of tau.  This is to specially
% handle the case where tau is a struct.

x not in S
E , a |- b : K , a'
--------------------------  :: base
P , E , a , S , L |- x : b , E ; x : b , a' , S + x , L

x not in S
E , a |- b [ e ] : K , a'
--------------------------  :: vector
P , E , a , S , L |- x : b [ e ] , E ; x : b [ e ] , a' , S + x , L

% Full formats are always byte-aligned, and their internal fields are
% lexically-scoped.  Note:
%
% - the adjustment of the environment for typing value expressions:
%   this is to enforce layering, i.e. generation code of embedded
%   struct fields cannot depend on the embedding environment.  This
%   ensures that structs can be generated bottom-up/inside-out.
%
% - the pre- and post- adjustment (reset) of the S set, which ensures
%   that field name uniqueness is only scoped within a struct.

x not in S
P , E , 0 , Empty , L |- D , E' , 0 , S' , L'
E' \ E |- VD
--------------------------  :: struct
P , E , a , S , L |- x : format { D ;; VD } , E ; x : format { D ;; VD } , 0 , S + x , L

% Formats enter the prelude only when they are well-typed.
f in P
--------------------------  :: refer
P , E , a , S , L |- x : format f , E ; x : format f , 0 , S , L

% An array needs to start and end on a byte-boundary.Note also the
% adjustment (reset) of the S set, and the threading of the L set, in
% the rule for the nested struct.

x not in S
a % 8 = 0
E |- e : int
P , E , 0 |- s : Struct , 0
--------------------------  :: elem_array
P , E , a , S , L |- x : elem_arr ( e , s ) , E ; x : elem_arr ( e , s ) , 0 , S + x , L

x not in S
a % 8 = 0
E |- e : int
P , E , 0 |- s : Struct , 0
--------------------------  :: size_array
P , E , a , S , L |- x : size_arr ( e , s ) , E ; x : size_arr ( e , s ) , 0 , S + x , L

x not in S
a % 8 = 0
E |- e : int
P , E , 0 |- s : Struct , 0
--------------------------  :: sized_struct
P , E , a , S , L |- x : s within e , E ; x : s , 0, S + x , L

% The field y should not be re-used for classification.  The root of
% the classification tree should be byte-aligned, and each path in the
% classification tree should end on a byte-aligned boundary.  Layering
% is again enforced by adjusting the environment for the typing of the
% value expressions of each classified struct.
%
% As before, the set S is adjusted again for the nested structs.
%
% The L set is used and modified in this rule only.  Note that the
% same L is used for each branch: this is valid, since at generation
% time, the branches are mutually exclusive, and any updates of L in
% one branch cannot affect another.

x not in S
a % 8 = 0
y not in L
E ( y ) = tau
distinct ( </ nj // j /> )
</ P , E , 0 , Empty , L |- Dj , Ej , aj , Sj , Lj // j />
aj % 8 = 0
</ Ej \ E |- VDj // j />
--------------------------  :: classify
P , E , a , S , L |- x : classify ( y ) </ vj , nj , sj // j /> , E ; x : </ vj , nj , sj // j /> , 0 , S + x , L + y

x not in S
a % 8 = 0
y not in L
E ( y ) = tau
distinct ( </ nj // j /> )
</ P , E , 0 , Empty , L |- Dj , Ej , aj , Sj , Lj // j />
aj % 8 = 0
</ Ej \ E |- VDj // j />
E |- e : int
--------------------------  :: classify
P , E , a , S , L |- x : classify ( y ) </ vj , nj , sj // j /> within e , E ; x : </ vj , nj , sj // j /> , 0 , S + x , L + y


% Value expressions.

% Bookkeeping judgement for sequences of value definitions.
defn
E |- VD             ::  :: field_values_typing :: '' by

</ E |- Vj // j />
--------------------------  :: field_values
E |- </ Vj // j />

% Another bookkeeping judgement for the cases of a value typing
% judgement.
defn
E |- V              ::  :: value_case_decl_typing :: '' by

% Implementation note: An exception to the base-type restriction is
% when the field is a bit-vector; in which case, the value expression
% should evaluate to an appropriate integer valued constant.
E ( x ) = base
</ E |- value_casej : base // j />
--------------------------  :: value_cases
E |- x : value_cases


% This relation specifies how the environment used for path lookups is
% built from the branch case specifications for the value expression.
% Note that the environment E in this relation is a restricted
% environment, containing only the field <-> type assignments for the
% immediately enclosing struct; outer enclosing structs are not
% present.  This is from the layering constraint mentioned enforced
% above.
defn
E , C |- branch_case : C'   ::  ::  branch_case_env :: '' by

% Single component paths, must refer to fields in the immediately
% enclosing struct.  We disallow repeated branch cases, hence this
% path must not be present in dom(C), but looked up in the environment
% E.
x not in dom ( C )
E ( x ) = tau
E , 0 |- tau : Map , a'
n in branches ( tau )
tau [ n ] = tau'
E , 0 |- tau' : Struct , a''
--------------------------  :: leaf_guard_check
E , C |- x = n : C ; x : tau'

% Multicomponent paths are looked up in C based on their prefix.
path in dom ( C )
C |- path : tau
E , 0 |- tau : Struct , a'
tau . x  = tau'
E , 0 |- tau' : Map , a''
n in branches ( tau' )
tau' [ n ] = tau''
E, 0 |- tau'' : Struct , a''
--------------------------  :: path_guard_check
E , C |- path . x  = n : C ; x : tau''


% This relation merely specifies how to process a list of branch
% cases.
defn
E , C |- bcases : C'        ::  :: class_env_spec :: '' by

--------------------------  :: nil_class_env_spec
E , C |- : C

E , C  |- bcases : C'
E , C' |- branch_case : C''
--------------------------  :: cons_class_env_spec
E , C |- bcases ; branch_case : C''


% A value_case is processed by first computing the classification tree
% environment from the specified branch cases, and then typing the
% value_exp.
defn
E |- value_case : tau       ::  :: value_case_typing :: '' by

E ,   |- bcases : C
E , C |- value_exp : tau
--------------------------  :: value_case
E |- bcases -> value_exp : tau



% This relation computes the type of a value_exp given the two
% environment components.  This is largely similar to the typing of
% expressions in the parsing-facet, with the following differences:
% - paths appear only in value expressions, and need to be looked up
%   using the classification tree environment C
% - some functions (e.g. sizeof, offset) appear only in value
%   expressions.
defn
E , C |- value_exp : tau    ::  :: value_exp_typing :: '' by

E ( x ) = tau
--------------------------  :: field_value
E , C |- x : tau

C |- path : tau
tau . x  = tau'
--------------------------  :: path_value
E , C |- path . x : tau'

E , C |- path : tau
--------------------------  :: sizeof
E , C |- sizeof path : int

E , C |- path : b [ e ]
--------------------------  :: length
E , C |- length path : int

E , C |- path : tau
--------------------------  :: offset
E , C |- offset path : int

E , C |- path : bit [ e ]
--------------------------  :: num_set_bits
E , C |- num_set_bits path : int

% For other forms of value expressions, we merely repeat the
% expression typing rules, with the addition of C as a component of
% the environment.  We avoid repeating these rules here.


% The following rules are an attempt to formalize the code-generation
% algorithm for the parsing facet.  The outline for this is as follows:
%
% . The grammar for the source-terms is restricted to structs, since
%   they form the top-level definitions in the input specification,
%   and the base and vectors types (i.e. b and b[e] above) are
%   largely handled by the runtime library.
%
% . A grammar for the target language is defined.  For simplicity:
%     . the types in this target language will include as primitives
%       the encodings used by the runtime library to represent the
%       base and vector types.
%     . the target language will include calls to the runtime
%       library as primitive expressions
%
% . The code-generation will be inductively specified as translation
%   relations between the source and target expressions and types.
%
% Thus, the target language will actually be a form of intermediate
% representation (IR) for the source specification.  The intention is
% that this IR be low-level enough to make code-generation into the
% final host language relatively simple, as well as high-level enough
% to abstract multiple possible host languages.
%
% The use of an IR also should help the development of an interpreter
% mode for the compiler, where the IR is interpreted directly instead
% of being used as an input for the code-generator.

grammar

% As mentioned, the source language only contains struct terms.

source_term, stm :: 'source_' ::=               {{ com Source terms }}
 | struct { D }             ::  :: struct

% The monomorphic type system of the target language.  The
% representation types are distinguished, to ease typing; they are the
% ones implemented in the runtime library of the host language.

target_type, tt :: 'target_' ::=                {{ com Target types }}
 | context                  ::  :: context
 | field                    ::  :: field_name
 | target_rep               ::  :: rep_type
 | host_rep                 ::  :: host_type

target_rep, tr :: 'target_rep_' ::=             {{ com Runtime library representations of source types }}
 | tt_base                  ::  :: base_type
 | tt_struct                ::  :: struct
 | tt_array tt_struct       ::  :: array
 | tt_map                   ::  :: map

host_rep, hr :: 'host_rep_' ::=                 {{ com Host language native types }}
 | bool                     ::  :: bool
 | byte                     ::  :: byte
 | int                      ::  :: int
 | int32                    ::  :: int32
 | int64                    ::  :: int64

tt_base, tb :: 'target_base_rep_' ::=           {{ com Base representation types }}
 | tt_primitive             ::  :: primitive
 | T_vector tt_primitive    ::  :: vector

tt_primitive, tp :: 'target_primitive_rep_' ::= {{ com Primitive representation types }}
 | T_bit                    ::  :: bit
 | T_byte                   ::  :: byte
 | T_int16                  ::  :: int16
 | T_int32                  ::  :: int32
 | T_int64                  ::  :: int64

tt_struct, ts :: 'target_struct_' ::=           {{ com Target struct types }}
 | { x1 : tr1 .. xj : trj } ::  :: struct

tt_map, tm :: 'target_map_' ::=
 | { n1 ts1 .. nj tsj }     ::  :: constructor

% The expressions of the target language.  As mentioned, it is at a
% level where calls to the runtime library and struct constructors are
% made explicit.

target_expr, te :: 'target_expr_' ::= {{ com Target expressions }}
 | integer_literal          ::   :: integer
 | tv                       ::   :: variable

 % These are special variables that contain the current parsing
 % context, and the context at the start of parsing the current
 % struct.  The current_context variable is a temporary hack to
 % support the IntCompile relation
 | current_context          ::   :: current_context
 | start_context            ::   :: context_at_struct_start

 % Arithmetic operations are passed the type of the arguments.  This
 % is so that code-generation will use the appropriate operation for
 % int32 and int64 operands.
 | plus hr te1 te2          ::   :: addition
 | minus hr te1 te2         ::   :: subtraction
 | mul hr te1 te2           ::   :: multiplication
 | div hr te1 te2           ::   :: division

 | te1 , te2                ::   :: tuples
 | ( te )                   :: S :: grouping

 % language constructs
 | let pat = te1 in te2     ::   :: let_binding
 | lambda ( tv : tt ) te    ::   :: lambda
 | te1 te2                  ::   :: application

 % high-level / runtime library operations
 | align tv i                     ::   :: alignment
 | sizeof tb                      ::   :: sizeof
 | length tv                      ::   :: length
 | offset te1 te2                 ::   :: offset
 | remaining tv                   ::   :: remaining
 | to_native tv                   ::   :: native_convert

 % from hr to hr'
 | type_convert hr hr' te         ::   :: type_convert

 | base_parse tb tv               ::   :: base_parser
 | base_vector_parse tb tv1 tv2   ::   :: vector_parser
 | make_struct x field_bindings   ::   :: struct_constructor
 | array_parse tr tv1 tv2         ::   :: array_parser

t_pat, pat :: 't_pattern_' ::= {{ com Target pattern expressions }}
 | tv                       ::   :: variable
 | tv , pat                 ::   :: tuple

field_binding, fb :: 't_binding_' ::=           {{ com Field binding }}
 | x : tr : te              ::   :: binding

field_bindings, fbs :: 't_bindings_' ::=        {{ com Field bindings }}
 | ( fb1 .. fbk )           ::   :: bindings


% The typing environment, which maps target variables to target types.
TE :: 'target_' ::=                             {{ com Target typing environment }}
 |                          ::  :: env_nil
 | tv : tt                  ::  :: env_cons
 | TE1 ; TE2                ::  :: env_append

% The field mapping environment, which maps source fields to target
% variables.  The target variables could contain values in the target
% representation types (in FE), or contexts at which those values were
% parsed (in OE).

FM, OE :: 'field_map_' ::=                      {{ com Field mapping environment }}
 |                          ::  :: env_null
 | x : tv                   ::  :: env_cons
 | FM1 ; FM2                ::  :: env_append

defns
Target_type_checking :: '' ::=

% Type environment lookup for target variables.
defn
TE ( tv ) = tt      ::  :: target_type_context :: 'target_type_context_' by

TE1 ; tv : tt ; TE2
--------------------------  :: var
TE ( tv ) = tt


% Type environment lookup for source fields.
defn
E ( x ) = tau       ::  :: source_type_context :: 'source_type_context_' by

E1 ; x : tau ; E2
--------------------------  :: var
E ( x ) = tau

% Field map environment lookup for source fields.
defn
FM ( x ) = tv       ::  :: field_map_context :: 'field_map_context_' by

FM1 ; x : tv ; FM2
--------------------------  :: field
FM ( x ) = tv

% Translation of source types to target representation types, as used
% by the runtime library.  This is the top-level algorithm, but it
% uses a couple of helpers for handling the ordering of the fields
% within a struct.

defn
BTrans [ b ] = tt_primitive ::  :: base_trans :: 'base_trans_' by

--------------------------  :: bit
BTrans [ bit ] = T_bit

--------------------------  :: byte
BTrans [ byte ] = T_byte

--------------------------  :: int16
BTrans [ int16 ] = T_int16

--------------------------  :: int32
BTrans [ int32 ] = T_int32

--------------------------  :: int64
BTrans [ int64 ] = T_int64

defn
TTrans [ tau ] = target_rep ::  :: type_trans :: 'type_trans_' by

BTrans [ b ] = tp
--------------------------  :: base
TTrans [ b ] = tp

TTrans [ b ] = tp
--------------------------  :: vector
TTrans [ b [ e ] ] = T_vector tp

TTrans [ tau ] = ts
--------------------------  :: array
TTrans [ ( e , tau ) ] = tt_array ts

</ TTrans [ tauj ] = tsj // j />
--------------------------  :: map
TTrans [ </ vj , nj, tauj // j /> ] = { </ nj tsj // j /> }

% A helper for translating structs with ordered fields.

defn
TTrans [ D ] , ts1 = ts2    ::  :: struct_trans :: 'struct_trans_' by

--------------------------  :: nil_decl
TTrans [   ] , ts = ts

TTrans [ F ] = x : tr
TTrans [ D ] , { x1 : tr1 .. xj : trj } = { y1 : tr'1 .. yk : tr'k }
--------------------------  :: cons_decl
TTrans [ F ; D ] , { x1 : tr1 .. xj : trj } = { x1 : tr1 .. xj : trj x : tr y1 : tr'1 .. yk : tr'k }

% A helper for per-field translation.

defn
TTrans [ F ] = x : tr       ::  :: field_trans :: 'field_trans_' by

% We omit alignments to simplify the algorithm specification; the
% actual implementation will need to skip them appropriately.

TTrans [ tau ] = ts
--------------------------  :: alignment
TTrans [ x : tau ] = x : ts

TTrans [ D ] , { } = ts
--------------------------  :: struct_array
TTrans [ x : array ( e ) { D ;; VD } ] = x : tt_array ts

</ TTrans [ Dj ] , { } = tsj // j />
--------------------------  :: classify
TTrans [ x : classify ( y ) { </ ej : nj -> { Dj ;; VDj } // j /> } ] = x : { </ nj tsj // j /> }


% This relation specifies the mapping between target primitive types
% and host language types.

defn
Host_rep ( tt_primitive ) = host_rep    ::  :: host_rep :: 'host_rep_' by

--------------------------  :: bit
Host_rep ( T_bit ) = bool

--------------------------  :: byte
Host_rep ( T_byte ) = byte

--------------------------  :: int16
Host_rep ( T_int16 ) = int

--------------------------  :: int32
Host_rep ( T_int32 ) = int32

--------------------------  :: int64
Host_rep ( T_int64 ) = int64


% The algorithms below use and sometimes update the following state:
%
% . the source typing environment E generated by the type-checking the
%   source term, as specified in the previous family of relations.  E
%   maps fields x to their source types tau: E(x) = tau.
%
% . the target typing environment TE tracks the target types tr of
%   target variables tv:  TE(tv) = tt.
%
% . the field map environment FM keeps track of which target variable tv
%   contains the value representing a field x:  FM(x) = tv.


% Expression compilation algorithm.  This compiles a source expression
% and its expected source base type, into a target expression that
% evaluates to a value of the specified type.  The type is specified
% as int when evaluating array/vector length expressions arising in
% the parsing context.  When evaluating classify expressions or value
% expressions, the type is specified as the appropriate host rep type.

defn
ExpCompile E , TE , FM , OE [ hr , e ] = te ::  :: exp_compile :: 'exp_compile_' by

--------------------------  :: int
ExpCompile E , TE , FM , OE [ hr , i ] = type_convert int hr i

E ( x ) = base
BTrans [ base ] = tp
Host_rep ( tp ) = hr'
FM ( x ) = tv
--------------------------  :: field_ref
ExpCompile E , TE , FM , OE [ hr , x ] = type_convert hr' hr ( to_native tv )

ExpCompile E , TE , FM , OE [ hr , e1 ] = te1
ExpCompile E , TE , FM , OE [ hr , e2 ] = te2
--------------------------  :: addition
ExpCompile E , TE , FM , OE [ hr , e1 + e2 ] = plus hr te1 te2

% and so on for the other operators '+', '-', '*', '/'.

E ( x ) = base
BTrans [ base ] = tp
--------------------------  :: sizeof
ExpCompile E , TE , FM , OE [ hr , sizeof x ] = type_convert int hr ( sizeof tp )

E ( x ) = tau
TTrans [ tau ] = T_vector tp
FM ( x ) = tv
--------------------------  :: length
ExpCompile E , TE , FM , OE [ hr , length x ] = type_convert int hr ( length tv )

OE ( x ) = tv
--------------------------  :: offset
ExpCompile E , TE , FM , OE [ hr , offset x ] = type_convert int hr ( offset tv start_context )

--------------------------  :: remaining
ExpCompile E , TE , FM , OE [ hr , remaining () ] = type_convert int hr ( offset current_context start_context )

% TODO:

% . Parser IR generation.
% . The typing algorithm for the target language.
